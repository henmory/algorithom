We have two special characters. The first character can be represented by one bit 0. The second character can be represented by
two bits (10 or 11).Now given a string represented by several bits. Return whether the last character must be a one-bit 
character or not. The given string will always end with a zero.


class Solution {
    public boolean isOneBitCharacter(int[] bits) {
        int length = bits.length;
        int i = 0;
        while(i < length - 1){
            if (bits[i] == 0) i++;
            else i +=2;
            }
        return i == length -1;
        }
}

判断一个字符串的最后一位是否可以单独表示一个自符：0 10 11 都可以单独表示一个自负

遍历所有字符从头到尾，为0，索引加1， 为1 索引加2，判断索引是否等于最后一个元素，
索引表示新字符的开始位置，如果i == length -1 表明最后一个0字符是新字符的开始，那么0就可以表示一个字符
如果不相等，那么最后一位就会跟倒数第二位表示一个字符，返回false
