Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

给出一个数组，跟一个target要去返回数组的下表，使下标中的两个两个数组和为target

1.循环数组，遍历两次，
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int length = nums.length;
        int i = 0;
        for(; i < length - 1; i++){
            int temp = target - nums[i];
            for(int j = i + 1; j< length; j++){
                if(temp == nums[j]){
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }
}

2.遍历一次数组，取出该元素放到hashmap，速度快不用遍历
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int length = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < length; i++){
            if(!map.containsKey(target - nums[i])){
                map.put(nums[i], i);
            }else{
                return new int[]{map.get(target-nums[i]), i};
            }
            
        }
        return null;
    }
}

本质是查找，因为数组是无序的，查找起来只能是顺序查找或者放到hashmap中查找

        }智能
        }
